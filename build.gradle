import groovy.io.FileType

plugins {
    id 'java'
    id "org.jetbrains.gradle.plugin.idea-ext" version "0.4.2"
}

group 'com.experitest.cloud.cli'
version '1.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()

}
compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}
dependencies {
    compile group: 'org.eclipse.jetty.websocket', name: 'websocket-client', version: '9.4.18.v20190429'
    compile "org.apache.httpcomponents:httpclient:4.5.7"
    compile "org.apache.httpcomponents:httpmime:4.5.7" // used for uploading application files
    compile 'com.google.code.gson:gson:2.8.2'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    //compile 'com.experitest:xpath-utils:1.0.6'
    compile files('libs/inamik-text-tables-1.0-SNAPSHOT.jar')
    compile files('libs/cloud-client-12.12.0-SNAPSHOT.jar')

    compile 'info.picocli:picocli:4.1.0'
    annotationProcessor 'info.picocli:picocli-codegen:4.1.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}
//task copyRuntimeLibs(type: Copy) {
//    into "cli/libs"
//    configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.forEach { artifact ->
//        from (artifact.file) {
//            rename { "${artifact.name}.${artifact.extension}" }
//        }
//    }
//}

task copyCli () {

    copy {
        from "build/libs"
        into "cli/libs"
    }
    copy {
        from "cc.bat"
        into "cli"
    }
    copy {
        from "cc"
        into "cli"
    }

}
task cliZip(type: Zip, dependsOn: copyCli){
    from "cli"
    archiveName "cli.zip"
}
//task zipFramework(type: Zip){
//    dependsOn "copyCli"
//    from("cli"){
//        include("**/**")
//    }
//    doFirst {
//        archiveName = "cli.zip"
//        destinationDir(file("build"))
//    }
//
//}
task listDirs(){
    doLast {
        def list = []

        def dir = new File(".")
        dir.eachFileRecurse(FileType.FILES) { file ->
            list << file
        }
        list.each {
            println it.path
        }
    }
}

task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.experitest.cloud.cli.CloudCli'
    }
    destinationDirectory = file('cli/libs')
    baseName = 'all-in-one-jar'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}